"""
Newsletter export utilities
"""

import os
from datetime import datetime
from typing import Dict, Any
import re

from models import Newsletter


class NewsletterExporter:
    """Export newsletters to various formats"""

    def __init__(self, export_dir: str = "exports"):
        self.export_dir = export_dir
        os.makedirs(export_dir, exist_ok=True)

    def export_to_markdown(self, newsletter: Newsletter) -> str:
        """Export newsletter to markdown file"""
        # Clean filename
        safe_title = re.sub(r"[^\w\s-]", "", newsletter.title).strip()
        safe_title = re.sub(r"[-\s]+", "-", safe_title)

        filename = f"{safe_title}-{newsletter.generated_at.strftime('%Y-%m-%d')}.md"
        filepath = os.path.join(self.export_dir, filename)

        # Write to file
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(newsletter.content)

        print(f"âœ… Newsletter exported to: {filepath}")
        return filepath

    def export_to_html(self, newsletter: Newsletter) -> str:
        """Export newsletter to HTML file with proper formatting"""
        # Convert markdown to HTML (basic conversion)
        html_content = self._markdown_to_html(newsletter.content)

        # Wrap in HTML template
        html_template = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{newsletter.title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
            border-left: 4px solid #3498db;
            padding-left: 15px;
        }}
        h3 {{
            color: #7f8c8d;
        }}
        a {{
            color: #3498db;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }}
        .section {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #3498db;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            text-align: center;
            color: #7f8c8d;
        }}
        .stats {{
            background: #e8f5e8;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{newsletter.title}</h1>
        <p>Generated: {newsletter.generated_at.strftime('%B %d, %Y at %I:%M %p UTC')}</p>
    </div>
    
    <div class="stats">
        <strong>Newsletter Statistics:</strong><br>
        ðŸ“Š Total Articles: {newsletter.total_articles}<br>
        ðŸ“‹ Sections: {len(newsletter.sections)}<br>
        ðŸ“… Format: {newsletter.config.format.value.title()}<br>
        ðŸŽ¨ Template: {newsletter.config.template.value.title()}
    </div>
    
    {html_content}
    
    <div class="footer">
        <p>Generated by AI Watchtower â€¢ {datetime.utcnow().year}</p>
    </div>
</body>
</html>"""

        # Save HTML file
        safe_title = re.sub(r"[^\w\s-]", "", newsletter.title).strip()
        safe_title = re.sub(r"[-\s]+", "-", safe_title)
        filename = f"{safe_title}-{newsletter.generated_at.strftime('%Y-%m-%d')}.html"
        filepath = os.path.join(self.export_dir, filename)

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(html_template)

        print(f"âœ… HTML newsletter exported to: {filepath}")
        return filepath

    def _markdown_to_html(self, markdown_content: str) -> str:
        """Basic markdown to HTML conversion"""
        html = markdown_content

        # Convert headers
        html = re.sub(r"^# (.*$)", r"<h1>\1</h1>", html, flags=re.MULTILINE)
        html = re.sub(r"^## (.*$)", r"<h2>\1</h2>", html, flags=re.MULTILINE)
        html = re.sub(r"^### (.*$)", r"<h3>\1</h3>", html, flags=re.MULTILINE)

        # Convert links
        html = re.sub(r"\[([^\]]+)\]\(([^)]+)\)", r'<a href="\2">\1</a>', html)

        # Convert bold
        html = re.sub(r"\*\*([^*]+)\*\*", r"<strong>\1</strong>", html)

        # Convert paragraphs
        paragraphs = html.split("\n\n")
        html_paragraphs = []

        for para in paragraphs:
            para = para.strip()
            if para and not para.startswith("<h") and not para.startswith("---"):
                if para.startswith("â€¢") or para.startswith("-"):
                    # Convert bullet points
                    items = para.split("\n")
                    ul_content = "".join(
                        [
                            f'<li>{item.lstrip("â€¢- ").strip()}</li>'
                            for item in items
                            if item.strip()
                        ]
                    )
                    html_paragraphs.append(f"<ul>{ul_content}</ul>")
                else:
                    html_paragraphs.append(f"<p>{para}</p>")
            else:
                html_paragraphs.append(para)

        return "\n".join(html_paragraphs)
